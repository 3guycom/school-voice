import{f as m,a as d,s as l}from"./index-JDxZcwZg.js";const f=m((s,t)=>({schools:[],school:null,members:[],invitations:[],loading:{school:!1,members:!1,invitations:!1},error:null,successMessage:null,clearMessages:()=>{s({error:null,successMessage:null})},getSchoolById:n=>{const{schools:r,school:e}=t();if(e&&e.id===n)return e;const o=r.find(a=>a.id===n);return o||null},fetchSchool:async n=>{const{currentSchool:r}=d.getState(),e=n||(r==null?void 0:r.id);if(!e)return s({error:"No school selected"}),null;s({loading:{...t().loading,school:!0},error:null});try{const{data:o,error:a}=await l.from("schools").select("*").eq("id",e).single();if(a)throw a;if(!o)throw new Error("School not found");const i={id:o.id,name:o.name,website:o.website,members:[],toneProfiles:[],createdAt:new Date(o.created_at),updatedAt:new Date(o.updated_at)};return s({school:i,loading:{...t().loading,school:!1},error:null}),i}catch(o){return console.error("Fetch school error:",o),s({loading:{...t().loading,school:!1},error:`Failed to load school: ${o.message}`}),null}},updateSchool:async n=>{const{school:r}=t(),{currentSchool:e}=d.getState();if(!r&&!e)return s({error:"No school selected"}),!1;const o=(r==null?void 0:r.id)||(e==null?void 0:e.id);if(!o)return s({error:"No school ID available"}),!1;s({loading:{...t().loading,school:!0},error:null,successMessage:null});try{const{error:a}=await l.from("schools").update({name:n.name,website:n.website,updated_at:new Date().toISOString()}).eq("id",o);if(a)throw a;return await t().fetchSchool(o),s({loading:{...t().loading,school:!1},successMessage:"School information updated successfully"}),!0}catch(a){return console.error("Update school error:",a),s({loading:{...t().loading,school:!1},error:`Failed to update school: ${a.message}`}),!1}},createSchool:async(n,r)=>{s({loading:{...t().loading,school:!0},error:null,successMessage:null});try{const{data:e,error:o}=await l.from("schools").insert([{name:n.trim(),website:(r==null?void 0:r.trim())||null}]).select().single();if(o)throw o;if(!e)throw new Error("Failed to create school, no data returned");const a=d.getState().user;if(!a)throw new Error("User not authenticated");const{error:i}=await l.from("school_members").insert([{school_id:e.id,user_id:a.id,role:"admin"}]);if(i)throw await l.from("schools").delete().eq("id",e.id),i;return await d.getState().loadUserSchools(),s({loading:{...t().loading,school:!1},successMessage:"School created successfully"}),{schoolId:e.id}}catch(e){return console.error("Create school error:",e),s({loading:{...t().loading,school:!1},error:`Failed to create school: ${e.message}`}),null}},fetchMembers:async n=>{s({loading:{...t().loading,members:!0},error:null});try{const{data:r,error:e}=await l.from("school_members").select("id, user_id, role, created_at").eq("school_id",n);if(e)throw e;const o=[];for(const a of r)try{const{data:i,error:c}=await l.from("users").select("email, display_name").eq("id",a.user_id).single();!c&&i?o.push({id:a.id,userId:a.user_id,email:i.email||"Unknown",displayName:i.display_name,role:a.role,joinedAt:new Date(a.created_at)}):o.push({id:a.id,userId:a.user_id,email:"Unknown",role:a.role,joinedAt:new Date(a.created_at)})}catch(i){console.warn(`Failed to get details for user ${a.user_id}:`,i)}return s({members:o,loading:{...t().loading,members:!1}}),o}catch(r){return console.error("Fetch members error:",r),s({loading:{...t().loading,members:!1},error:`Failed to load school members: ${r.message}`}),[]}},updateMemberRole:async(n,r)=>{s({loading:{...t().loading,members:!0},error:null,successMessage:null});try{const{error:e}=await l.from("school_members").update({role:r}).eq("id",n);if(e)throw e;const o=t().members.map(a=>a.id===n?{...a,role:r}:a);return s({members:o,loading:{...t().loading,members:!1},successMessage:"Member role updated successfully"}),!0}catch(e){return console.error("Update member role error:",e),s({loading:{...t().loading,members:!1},error:`Failed to update member role: ${e.message}`}),!1}},removeMember:async n=>{s({loading:{...t().loading,members:!0},error:null,successMessage:null});try{const{error:r}=await l.from("school_members").delete().eq("id",n);if(r)throw r;const e=t().members.filter(o=>o.id!==n);return s({members:e,loading:{...t().loading,members:!1},successMessage:"Member removed successfully"}),!0}catch(r){return console.error("Remove member error:",r),s({loading:{...t().loading,members:!1},error:`Failed to remove member: ${r.message}`}),!1}},fetchInvitations:async n=>{s({loading:{...t().loading,invitations:!0},error:null});try{const{data:r,error:e}=await l.from("invitations").select(`
          id,
          school_id,
          email,
          role,
          token,
          expires_at,
          accepted_at,
          created_at,
          created_by
        `).eq("school_id",n).is("accepted_at",null).gt("expires_at",new Date().toISOString());if(e)throw e;let o="Unknown School";try{const{data:i}=await l.from("schools").select("name").eq("id",n).single();i&&(o=i.name)}catch(i){console.warn(`Failed to get name for school ${n}:`,i)}const a=r.map(i=>({id:i.id,schoolId:i.school_id,schoolName:o,email:i.email,role:i.role,token:i.token,expiresAt:new Date(i.expires_at),createdBy:i.created_by,createdAt:new Date(i.created_at)}));return s({invitations:a,loading:{...t().loading,invitations:!1}}),a}catch(r){return console.error("Fetch invitations error:",r),s({loading:{...t().loading,invitations:!1},error:`Failed to load invitations: ${r.message}`}),[]}},createInvitation:async(n,r,e)=>{s({loading:{...t().loading,invitations:!0},error:null,successMessage:null});try{const o=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15),a=new Date;a.setDate(a.getDate()+7);const i=d.getState().user;if(!i)throw new Error("User not authenticated");const{error:c}=await l.from("invitations").insert([{school_id:n,email:r.toLowerCase().trim(),role:e,token:o,expires_at:a.toISOString(),created_by:i.id}]);if(c)throw c.code==="23505"?new Error("An invitation has already been sent to this email"):c;return await t().fetchInvitations(n),s({loading:{...t().loading,invitations:!1},successMessage:`Invitation sent to ${r}`}),!0}catch(o){return console.error("Create invitation error:",o),s({loading:{...t().loading,invitations:!1},error:`Failed to send invitation: ${o.message}`}),!1}},deleteInvitation:async n=>{s({loading:{...t().loading,invitations:!0},error:null,successMessage:null});try{const{error:r}=await l.from("invitations").delete().eq("id",n);if(r)throw r;const e=t().invitations.filter(o=>o.id!==n);return s({invitations:e,loading:{...t().loading,invitations:!1},successMessage:"Invitation deleted successfully"}),!0}catch(r){return console.error("Delete invitation error:",r),s({loading:{...t().loading,invitations:!1},error:`Failed to delete invitation: ${r.message}`}),!1}},acceptInvitation:async n=>{var r;s({loading:{school:!0,members:!0,invitations:!0},error:null,successMessage:null});try{const{data:e,error:o}=await l.from("invitations").select("id, school_id, email, role, expires_at").eq("token",n).is("accepted_at",null).gt("expires_at",new Date().toISOString()).single();if(o)throw new Error("Invalid or expired invitation");if(!e)throw new Error("Invitation not found");const{data:{user:a},error:i}=await l.auth.getUser();if(i||!a)throw new Error("You must be signed in to accept an invitation");if(((r=a.email)==null?void 0:r.toLowerCase())!==e.email.toLowerCase())throw new Error("This invitation was sent to a different email address");const{error:c}=await l.from("school_members").insert([{school_id:e.school_id,user_id:a.id,role:e.role}]);if(c)throw c.code==="23505"?new Error("You are already a member of this school"):c;const{error:u}=await l.from("invitations").update({accepted_at:new Date().toISOString()}).eq("id",e.id);if(u)throw u;return await d.getState().loadUserSchools(),s({loading:{school:!1,members:!1,invitations:!1},successMessage:"You have successfully joined the school"}),{schoolId:e.school_id}}catch(e){return console.error("Accept invitation error:",e),s({loading:{school:!1,members:!1,invitations:!1},error:`Failed to accept invitation: ${e.message}`}),null}}}));export{f as u};
